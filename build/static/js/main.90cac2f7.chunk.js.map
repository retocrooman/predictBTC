{"version":3,"sources":["components/Admin.js","App.js","reportWebVitals.js","index.js"],"names":["Admin","useState","setWeb3","address","setAddress","contractAddress","contract","setContract","BTCprice","setBTCprice","preBTCprice","setPreBTCprice","setIndex1","setIndex2","index","setIndex","setAvg1","setAvg2","avg","setAvg","deadline","setDeadline","snapshot","setSnapshot","value","setValue","init","a","detectEthereumProvider","window","ethereum","isMetaMask","web3","Web3","givenProvider","eth","requestAccounts","accounts","Contract","PredictBTC","abi","methods","getLatestBtcJpyPrice","call","rotation","rotationCheck","index1","index2","avg1","avg2","deadline_time","deadlineTimestamp","Date","parseInt","toLocaleString","snapshot_time","snapshotTimestamp","alert","console","log","message","useEffect","Update","Play","play","send","from","Deadline","Snapshot","style","width","margin","marginTop","textAlign","boxShadow","padding","borderRadius","backgroundColor","Button","variant","onClick","TextField","onChange","e","target","label","sx","height","right","left","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90cac2f7.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nimport PredictBTC from '../abi/PredictBTC.json';\n\nconst Admin = () => {\n    const [web3, setWeb3] = useState([]);\n    const [address, setAddress] = useState(\"\");\n    const [contractAddress, setContractAddress] = useState(\"0x6Ae7d6B73727261bAD993Be70640628f265ddB73\");\n    const [contract, setContract] = useState([]);\n    const [BTCprice, setBTCprice] = useState(0);\n    const [preBTCprice, setPreBTCprice] = useState(0);\n    const [rotation, setRotation] = useState(1);\n    const [index1, setIndex1] = useState(0);\n    const [index2, setIndex2] = useState(0);\n    const [index, setIndex] = useState(0);\n    const [avg1, setAvg1] = useState(0);\n    const [avg2, setAvg2] = useState(0);\n    const [avg, setAvg] = useState(0);\n    const [deadline, setDeadline] = useState(\"\");\n    const [snapshot, setSnapshot] = useState(\"\");\n\n    const [value, setValue] = useState(0);\n\n    const init = async () => {\n        const provider = await detectEthereumProvider();\n\n        if(provider && window.ethereum.isMetaMask) {\n            try {\n                const web3 = new Web3(Web3.givenProvider);\n                const accounts = await web3.eth.requestAccounts();\n                const contract = new web3.eth.Contract(PredictBTC.abi, contractAddress);\n                const BTCprice = await contract.methods.getLatestBtcJpyPrice().call();\n                const preBTCprice = await contract.methods.BTCprice().call();\n                const rotationCheck = await contract.methods.rotation().call();\n                const index1 = await contract.methods.index1().call();\n                const index2 = await contract.methods.index2().call();\n                const avg1 = await contract.methods.avg1().call();\n                const avg2 = await contract.methods.avg2().call();\n                const deadlineTimestamp = await contract.methods.deadline_time().call();\n                const deadline = new Date(parseInt(deadlineTimestamp)*1000).toLocaleString();\n                const snapshotTimestamp = await contract.methods.snapshot_time().call();\n                const snapshot = new Date(parseInt(snapshotTimestamp)*1000).toLocaleString();\n                setContract(contract);\n                setBTCprice(BTCprice);\n                setPreBTCprice(preBTCprice);\n                if(rotationCheck) {\n                    setIndex(index1);\n                    setAvg(avg1);\n                }\n                else {\n                    setIndex(index2);\n                    setAvg(avg2);\n                }\n                setIndex1(index1);\n                setIndex2(index2);\n                setAvg1(avg1);\n                setAvg2(avg2);\n                setDeadline((new Date(deadline)).toLocaleString());\n                setSnapshot((new Date(snapshot)).toLocaleString());\n                setWeb3(web3);\n                setAddress(accounts[0]);\n            } catch(error) {\n                alert('web3 or contract error')\n                console.log(error.message);\n            }\n        }\n        else {\n            alert('Please Install MetaMask');\n        }\n\n    }\n\n    useEffect(() => {\n        init();\n    }, []);\n    \n    const Update = async () => {\n        init();\n    }\n    \n    const Play = async () => {\n        try {\n            await contract.methods.play(value).send({from: address});\n            alert('Play Sucess!');\n        } catch(error) {\n            alert('Play Fail');\n            console.log(error.message);\n        }\n    }\n\n    const Deadline = async () => {\n        try {\n            await contract.methods.deadline().send({from: address});\n            alert('Deadline Success!');\n        } catch(error) {\n            alert('Deadline Fail');\n            console.log(error.message);\n        }\n    }\n\n    const Snapshot = async () => {\n        try {\n            await contract.methods.snapshot().send({from: address});\n            alert('Snapshot Success!');\n        } catch(error) {\n            alert('Snapshot Fail');\n            console.log(error.message);\n        }\n    }\n\n    return (\n        <div style={{ width: '900px', margin: 'auto', marginTop: '50px', textAlign: 'center', boxShadow: '0 0 8px gray', padding: '20px', borderRadius: 40, backgroundColor: 'white'}}>\n            <h1>Welcom to PredictBTC!</h1>\n            <Button variant=\"outlined\" onClick={Update}>metamaskに接続する</Button>\n            <p>contractAddress : {contractAddress}<br/>\n            yourAddress : {address}<br/><br/>\n            BTC価格 : {BTCprice}円<br/>\n            前回のスナップショット時のBTC価格 : {preBTCprice}円</p>\n            <h4>今回の参加人数は{index}人で、\n            平均予想価格は{avg}円です。<br/>\n            締め切り日時は{deadline}<br/>\n            スナップショット日時は{snapshot}</h4>\n            <TextField value={value} onChange={e => setValue(e.target.value)} variant=\"outlined\" label=\"予想価格円\" />\n            <Button sx={{height: '55px'}} variant=\"contained\" onClick={Play}>賭ける</Button>\n            <br/>\n            <p>予想と実際の価格の誤差が0.1%未満の場合50000PBT、1%未満の場合は20000PBT、<br/>\n                3%未満の場合は10000PBT、5%未満の場合は5000PBT、8%未満の場合は2000PBT、<br/>\n                10%未満の場合は1000PBT、20%未満の場合は500PBTが貰えます。</p>\n            <br/>\n            <Button sx={{right:'10px', width:'200px'}} variant=\"outlined\" onClick={Deadline}>締め切り日時を更新する</Button>\n            <Button sx={{left:'10px', width:'200px'}} variant=\"outlined\" onClick={Snapshot}>スナップショット</Button>\n            <br/>\n            <p>締め切り日時の更新とスナップショットのボタンは上記の時間帯を過ぎると押すことができます。<br/>\n            一番最初に実行した人は1000PBTを貰えます。</p>\n        </div>\n    );\n}\n\nexport default Admin;","import React from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Admin from './components/Admin';\n\nfunction App() {\n  return (\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<Admin />} />\n    </Routes>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}