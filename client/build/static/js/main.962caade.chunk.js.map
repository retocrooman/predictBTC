{"version":3,"sources":["components/Admin.js","App.js","reportWebVitals.js","index.js"],"names":["contractAddress","Admin","useState","address","setAddress","contract","setContract","BTCprice","setBTCprice","preBTCprice","setPreBTCprice","yourBTCprice","setYourBTCprice","index","setIndex","avg","setAvg","deadline","setDeadline","snapshot","setSnapshot","value","setValue","init","a","detectEthereumProvider","window","ethereum","isMetaMask","web3","Web3","givenProvider","eth","requestAccounts","accounts","Contract","PredictBTC","abi","methods","getLatestBtcJpyPrice","call","getPredictPrice","from","deadline_time","deadlineTimestamp","Date","parseInt","toLocaleString","snapshot_time","snapshotTimestamp","alert","console","log","message","useEffect","Play","rotation","play","send","Deadline","Snapshot","style","width","margin","marginTop","textAlign","boxShadow","padding","borderRadius","backgroundColor","Button","variant","onClick","TextField","onChange","e","target","label","sx","height","right","left","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"q06CAQMA,EAAkB,6CA4HTC,EA1HD,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,OAGgBJ,mBAAS,GAHzB,mBAGTK,EAHS,KAGCC,EAHD,OAIsBN,mBAAS,GAJ/B,mBAITO,EAJS,KAIIC,EAJJ,OAKwBR,mBAAS,GALjC,mBAKTS,EALS,KAKKC,EALL,OAMUV,mBAAS,GANnB,mBAMTW,EANS,KAMFC,EANE,OAOMZ,mBAAS,GAPf,mBAOTa,EAPS,KAOJC,EAPI,OAQgBd,mBAAS,IARzB,mBAQTe,EARS,KAQCC,EARD,OASgBhB,mBAAS,IATzB,mBASTiB,EATS,KASCC,EATD,OAWUlB,mBAAS,GAXnB,mBAWTmB,EAXS,KAWFC,EAXE,KAaVC,EAAI,uCAAG,kDAAAC,EAAA,sEACcC,MADd,oBAGMC,OAAOC,SAASC,WAHtB,iCAKKC,EAAO,IAAIC,IAAKA,IAAKC,eAL1B,SAMsBF,EAAKG,IAAIC,kBAN/B,cAMKC,EANL,OAOK7B,EAAW,IAAIwB,EAAKG,IAAIG,SAASC,EAAWC,IAAKrC,GAPtD,UAQsBK,EAASiC,QAAQC,uBAAuBC,OAR9D,eAQKjC,EARL,iBASyBF,EAASiC,QAAQ/B,WAAWiC,OATrD,eASK/B,EATL,iBAU0BJ,EAASiC,QAAQG,kBAAkBD,KAAK,CAACE,KAAKR,EAAS,KAVjF,eAUKvB,EAVL,iBAWmBN,EAASiC,QAAQzB,QAAQ2B,OAX5C,eAWK3B,EAXL,iBAYiBR,EAASiC,QAAQvB,MAAMyB,OAZxC,eAYKzB,EAZL,iBAa+BV,EAASiC,QAAQK,gBAAgBH,OAbhE,eAaKI,EAbL,OAcK3B,EAAW,IAAI4B,KAAiC,IAA5BC,SAASF,IAAyBG,iBAd3D,UAe+B1C,EAASiC,QAAQU,gBAAgBR,OAfhE,QAeKS,EAfL,OAgBK9B,EAAW,IAAI0B,KAAiC,IAA5BC,SAASG,IAAyBF,iBAC5DzC,EAAYD,GACZG,EAAYD,GACZG,EAAeD,GACfG,EAAgBD,GAChBG,EAASD,GACTG,EAAOD,GACPG,EAAa,IAAI2B,KAAK5B,GAAW8B,kBACjC3B,EAAa,IAAIyB,KAAK1B,GAAW4B,kBACjC3C,EAAW8B,EAAS,IAzBnB,kDA2BDgB,MAAM,0BACNC,QAAQC,IAAI,KAAMC,SA5BjB,gCAgCLH,MAAM,2BAhCD,0DAAH,qDAqCVI,qBAAU,WACN/B,MACD,IAEH,IAAMgC,EAAI,uCAAG,sBAAA/B,EAAA,sEACcnB,EAASiC,QAAQkB,WAAWhB,OAD1C,4DAIKnC,EAASiC,QAAQmB,KAAKpC,GAAOqC,KAAK,CAAChB,KAAMvC,IAJ9C,OAKD+C,MAAM,gBACN3B,IANC,kDAQD2B,MAAM,aACNC,QAAQC,IAAI,KAAMC,SATjB,gCAaLH,MAAM,iBAbD,0DAAH,qDAiBJS,EAAQ,uCAAG,sBAAAnC,EAAA,+EAEHnB,EAASiC,QAAQrB,WAAWyC,KAAK,CAAChB,KAAMvC,IAFrC,OAGT+C,MAAM,qBACN3B,IAJS,gDAMT2B,MAAM,iBACNC,QAAQC,IAAI,KAAMC,SAPT,yDAAH,qDAWRO,GAAQ,uCAAG,sBAAApC,EAAA,+EAEHnB,EAASiC,QAAQnB,WAAWuC,KAAK,CAAChB,KAAMvC,IAFrC,OAGT+C,MAAM,qBACN3B,IAJS,gDAMT2B,MAAM,iBACNC,QAAQC,IAAI,KAAMC,SAPT,yDAAH,qDAWd,OACI,sBAAKQ,MAAO,CAAEC,MAAO,QAASC,OAAQ,OAAQC,UAAW,OAAQC,UAAW,SAAUC,UAAW,eAAgBC,QAAS,OAAQC,aAAc,GAAIC,gBAAiB,SAArK,UACI,uDACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASjD,EAApC,oDACA,mDAAsBvB,EAAgB,uBAAtC,iBACeG,EAAQ,uBAAK,uBAD5B,uCAEYI,EAFZ,SAEsB,uBAFtB,mGAGsBE,EAHtB,SAGmC,uBAHnC,yDAIeE,EAJf,YAKA,kFAAaE,EAAb,gEACQE,EADR,2BACgB,uBADhB,6CAEQE,EAAS,uBAFjB,qEAGYE,KACZ,cAACsD,EAAA,EAAD,CAAWpD,MAAOA,EAAOqD,SAAU,SAAAC,GAAC,OAAIrD,EAASqD,EAAEC,OAAOvD,QAAQkD,QAAQ,WAAWM,MAAM,mCAC3F,cAACP,EAAA,EAAD,CAAQQ,GAAI,CAACC,OAAQ,QAASR,QAAQ,YAAYC,QAASjB,EAA3D,gCACA,uBACA,6MAAkD,uBAAlD,6JACqD,uBADrD,2IAGA,uBACA,cAACe,EAAA,EAAD,CAAQQ,GAAI,CAACE,MAAM,OAAQlB,MAAM,SAAUS,QAAQ,WAAWC,QAASb,EAAvE,wDACA,cAACW,EAAA,EAAD,CAAQQ,GAAI,CAACG,KAAK,OAAQnB,MAAM,SAAUS,QAAQ,WAAWC,QAASZ,GAAtE,8DACA,uBACA,6RAA6C,uBAA7C,uHChHGsB,MAVf,WACE,OACA,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,WCIhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.962caade.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nimport PredictBTC from '../abi/PredictBTC.json';\n\nconst contractAddress = \"0x48D8276499d51199ebfC1f0a1893a1AbEAb314Da\";\n\nconst Admin = () => {\n    const [address, setAddress] = useState(\"\");\n    const [contract, setContract] = useState([]);\n    const [BTCprice, setBTCprice] = useState(0);\n    const [preBTCprice, setPreBTCprice] = useState(0);\n    const [yourBTCprice, setYourBTCprice] = useState(0);\n    const [index, setIndex] = useState(0);\n    const [avg, setAvg] = useState(0);\n    const [deadline, setDeadline] = useState(\"\");\n    const [snapshot, setSnapshot] = useState(\"\");\n\n    const [value, setValue] = useState(0);\n\n    const init = async () => {\n        const provider = await detectEthereumProvider();\n\n        if(provider && window.ethereum.isMetaMask) {\n            try {\n                const web3 = new Web3(Web3.givenProvider);\n                const accounts = await web3.eth.requestAccounts();\n                const contract = new web3.eth.Contract(PredictBTC.abi, contractAddress);\n                const BTCprice = await contract.methods.getLatestBtcJpyPrice().call();\n                const preBTCprice = await contract.methods.BTCprice().call();\n                const yourBTCprice = await contract.methods.getPredictPrice().call({from:accounts[0]});\n                const index = await contract.methods.index().call();\n                const avg = await contract.methods.avg().call();\n                const deadlineTimestamp = await contract.methods.deadline_time().call();\n                const deadline = new Date(parseInt(deadlineTimestamp)*1000).toLocaleString();\n                const snapshotTimestamp = await contract.methods.snapshot_time().call();\n                const snapshot = new Date(parseInt(snapshotTimestamp)*1000).toLocaleString();\n                setContract(contract);\n                setBTCprice(BTCprice);\n                setPreBTCprice(preBTCprice);\n                setYourBTCprice(yourBTCprice);\n                setIndex(index);\n                setAvg(avg);\n                setDeadline((new Date(deadline)).toLocaleString());\n                setSnapshot((new Date(snapshot)).toLocaleString());\n                setAddress(accounts[0]);\n            } catch(error) {\n                alert('web3 or contract error')\n                console.log(error.message);\n            }\n        }\n        else {\n            alert('Please Install MetaMask');\n        }\n\n    }\n\n    useEffect(() => {\n        init();\n    }, []);\n    \n    const Play = async () => {\n        const rotation = await contract.methods.rotation().call();\n        if (rotation) {\n            try {\n                await contract.methods.play(value).send({from: address});\n                alert('Play Sucess!');\n                init();\n            } catch(error) {\n                alert('Play Fail');\n                console.log(error.message);\n            }\n        }\n        else {\n            alert('not play term');\n        }\n    }\n\n    const Deadline = async () => {\n        try {\n            await contract.methods.deadline().send({from: address});\n            alert('Deadline Success!');\n            init();\n        } catch(error) {\n            alert('Deadline Fail');\n            console.log(error.message);\n        }\n    }\n\n    const Snapshot = async () => {\n        try {\n            await contract.methods.snapshot().send({from: address});\n            alert('Snapshot Success!');\n            init();\n        } catch(error) {\n            alert('Snapshot Fail');\n            console.log(error.message);\n        }\n    }\n\n    return (\n        <div style={{ width: '900px', margin: 'auto', marginTop: '50px', textAlign: 'center', boxShadow: '0 0 8px gray', padding: '20px', borderRadius: 40, backgroundColor: 'white'}}>\n            <h1>Welcom to PredictBTC!</h1>\n            <Button variant=\"outlined\" onClick={init}>metamaskに接続する</Button>\n            <p>contractAddress : {contractAddress}<br/>\n            yourAddress : {address}<br/><br/>\n            現在のBTC価格 : {BTCprice}円<br/>\n            前回のスナップショット時のBTC価格 : {preBTCprice}円<br/>\n            あなたの予想BTC価格 : {yourBTCprice}円</p>\n            <h4>今回の参加人数は{index}人で、\n            平均予想価格は{avg}円です。<br/>\n            締め切り日時は{deadline}<br/>\n            スナップショット日時は{snapshot}</h4>\n            <TextField value={value} onChange={e => setValue(e.target.value)} variant=\"outlined\" label=\"予想価格円\" />\n            <Button sx={{height: '55px'}} variant=\"contained\" onClick={Play}>賭ける</Button>\n            <br/>\n            <p>予想と実際の価格の誤差が0.1%未満の場合50000PBT、1%未満の場合は20000PBT、<br/>\n                3%未満の場合は10000PBT、5%未満の場合は5000PBT、8%未満の場合は2000PBT、<br/>\n                10%未満の場合は1000PBT、20%未満の場合は500PBTが貰えます。</p>\n            <br/>\n            <Button sx={{right:'10px', width:'200px'}} variant=\"outlined\" onClick={Deadline}>投票を締め切る</Button>\n            <Button sx={{left:'10px', width:'200px'}} variant=\"outlined\" onClick={Snapshot}>スナップショット</Button>\n            <br/>\n            <p>投票の締め切りとスナップショットのボタンは上記の時間帯を過ぎると押すことができます。<br/>\n            一番最初に実行した人は1000PBTを貰えます。</p>\n        </div>\n    );\n}\n\nexport default Admin;","import React from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Admin from './components/Admin';\n\nfunction App() {\n  return (\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<Admin />} />\n    </Routes>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}